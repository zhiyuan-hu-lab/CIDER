[{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Start with Assisted CIDER (asCIDER)","text":"vignette performs asCIDER, meta-clustering method, cross-species pancreas dataset. AsCIDER aimed achieve clustering task data confounded unwanted variables. scenario, unwanted variable species effects. asCIDER short assisted CIDER, assisted prior batch-specific annotations clustering results.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Getting Start with Assisted CIDER (asCIDER)","text":"addition CIDER, load following packages:","code":"library(CIDER) library(Seurat) library(pheatmap) library(ggplot2) library(cowplot) library(viridis)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"pancreas-data","dir":"Articles","previous_headings":"","what":"Pancreas data","title":"Getting Start with Assisted CIDER (asCIDER)","text":"example data can downloaded https://figshare.com/s/d5474749ca8c711cc205. data1^1 contain cells human (8241 cells) mouse (1886 cells).","code":"load(\"../data/pancreas_counts.RData\") # count matrix load(\"../data/pancreas_meta.RData\") # meta data/cell information seu <- CreateSeuratObject(counts = pancreas_counts, meta.data = pancreas_meta) table(seu$Batch) #>  #> human mouse  #>  8241  1886"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"exam-if-data-are-confounded","dir":"Articles","previous_headings":"","what":"Exam if data are confounded","title":"Getting Start with Assisted CIDER (asCIDER)","text":"Prior use CIDER (integration methods clustering) important exam clustering confounded cross-species factors. first perform conventional Seurat2^2 clustering pipeline.","code":"seu <- NormalizeData(seu, verbose = FALSE) seu <- FindVariableFeatures(seu, selection.method = \"vst\", nfeatures = 2000, verbose = FALSE) seu <- ScaleData(seu, verbose = FALSE) seu <- RunPCA(seu, npcs = 20, verbose = FALSE) seu <- RunTSNE(seu, reduction = \"pca\", dims = 1:12)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"confounded-dimension-reduction","dir":"Articles","previous_headings":"Exam if data are confounded","what":"Confounded dimension reduction","title":"Getting Start with Assisted CIDER (asCIDER)","text":"PCA t-SNE plots showed data confounded species. scatterPlot function used generate dimension reduction figures. takes input Seurat object (seu ), name reduction (pca tsne ), variable deciding dot colours (Batch ) title plots. See information ?scatterPlot","code":"p1 <- scatterPlot(seu, \"pca\",colour.by = \"Batch\", title = \"PCA\")  p2 <- scatterPlot(seu, \"tsne\",colour.by = \"Batch\", title = \"t-SNE\")  plot_grid(p1, p2)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"confounded-clustering-results","dir":"Articles","previous_headings":"Exam if data are confounded","what":"Confounded clustering results","title":"Getting Start with Assisted CIDER (asCIDER)","text":"","code":"seu <- FindNeighbors(seu, dims = 1:12) #> Computing nearest neighbor graph #> Computing SNN seu <- FindClusters(seu) #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 10127 #> Number of edges: 352494 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: 0.9149 #> Number of communities: 22 #> Elapsed time: 1 seconds  scatterPlot(seu, \"tsne\",colour.by = \"seurat_clusters\", title = \"t-SNE\") res <- data.frame(table(seu$seurat_clusters, seu$Batch)) ggplot(res, aes(fill=Var2, y=Freq, x=Var1)) +      geom_bar(position=\"stack\", stat=\"identity\") + xlab(\"CIDER_cluster\") + ylab(\"Proportions\")"},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"prepare-initial-clusters","dir":"Articles","previous_headings":"asCIDER","what":"Prepare initial clusters","title":"Getting Start with Assisted CIDER (asCIDER)","text":"asCIDER uses existing within-batch clustering results. concatenate batch ID within-batch cluster ID obtain cluster-specific groups (.e. initial clusters).","code":"seu$initial_cluster <- paste(seu$Group, seu$Batch, sep = \"_\") table(seu$initial_cluster) #>  #>             acinar_human activated_stellate_human activated_stellate_mouse  #>                      932                      275                       14  #>              alpha_human              alpha_mouse             b_cell_mouse  #>                     2241                      191                       10  #>               beta_human               beta_mouse              delta_human  #>                     2455                      894                      592  #>              delta_mouse             ductal_human             ductal_mouse  #>                      218                     1033                      275  #>        endothelial_human        endothelial_mouse            epsilon_human  #>                      214                      139                       17  #>              gamma_human              gamma_mouse       immune_other_mouse  #>                      241                       41                        8  #>         macrophage_human         macrophage_mouse               mast_human  #>                       39                       36                       25  #> quiescent_stellate_human quiescent_stellate_mouse            schwann_human  #>                      160                       47                       10  #>            schwann_mouse             t_cell_human             t_cell_mouse  #>                        6                        7                        7"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"calculate-of-ider-similarity-matrix","dir":"Articles","previous_headings":"asCIDER","what":"Calculate of IDER similarity matrix","title":"Getting Start with Assisted CIDER (asCIDER)","text":"function getIDEr calculate IDER-based distance matrix. default, use column called “initial_cluster” initial clusters, “Batch” batch. using columns two, please revise two parameters. step, can choose use parallel computation setting use.parallel = TRUE (default use.parallel = FALSE). default number cores used parallel computation detectCores(logical = FALSE) - 1.","code":"ider <- getIDEr(seu,                  group.by.var = \"initial_cluster\",                 batch.by.var = \"Batch\",                 downsampling.size = 35,                  use.parallel = FALSE, verbose = FALSE)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"visualise-the-similarity-matrix","dir":"Articles","previous_headings":"asCIDER","what":"Visualise the similarity matrix","title":"Getting Start with Assisted CIDER (asCIDER)","text":"","code":"groups <- c(\"alpha\",\"beta\",\"delta\", \"gamma\",\"ductal\",\"endothelial\", \"activated_stellate\", \"quiescent_stellate\", \"macrophage\") idx1 <- paste0(groups, \"_human\") idx2 <- paste0(groups, \"_mouse\")  pheatmap::pheatmap(   ider[[1]][idx1, idx2],   color = inferno(10),   border_color = NA,   display_numbers = TRUE,   cluster_rows = FALSE,   cluster_cols = FALSE,   width = 7,   height = 5,   cellwidth = 22,   cellheight = 22 )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"perform-final-clustering","dir":"Articles","previous_headings":"asCIDER","what":"Perform final Clustering","title":"Getting Start with Assisted CIDER (asCIDER)","text":"Next put Seurat object similarity matrix list finalClustering. can either cut trees height (set cutree.= 'h) k (set cutree.= 'k). default cutting height 0.45. final clustering results stored Colume cider_final_cluster Seurat object metadata can extracted using seu$cider_final_cluster.","code":"seu <- finalClustering(seu, ider, cutree.h = 0.45) head(seu@meta.data) #>                             orig.ident nCount_RNA nFeature_RNA Batch   Group #> mouse1_lib1.final_cell_0001     mouse1      11003         2994 mouse    beta #> mouse1_lib1.final_cell_0002     mouse1      10701         3565 mouse  ductal #> mouse1_lib1.final_cell_0003     mouse1       9445         2401 mouse   delta #> mouse1_lib1.final_cell_0004     mouse1       8193         2865 mouse schwann #> mouse1_lib1.final_cell_0005     mouse1       7323         2355 mouse   delta #> mouse1_lib1.final_cell_0006     mouse1       8504         2637 mouse    beta #>                             Sample RNA_snn_res.0.8 seurat_clusters #> mouse1_lib1.final_cell_0001 mouse1               9               9 #> mouse1_lib1.final_cell_0002 mouse1              13              13 #> mouse1_lib1.final_cell_0003 mouse1               7               7 #> mouse1_lib1.final_cell_0004 mouse1              21              21 #> mouse1_lib1.final_cell_0005 mouse1               7               7 #> mouse1_lib1.final_cell_0006 mouse1               8               8 #>                             initial_cluster CIDER_cluster #> mouse1_lib1.final_cell_0001      beta_mouse             1 #> mouse1_lib1.final_cell_0002    ductal_mouse             2 #> mouse1_lib1.final_cell_0003     delta_mouse             3 #> mouse1_lib1.final_cell_0004   schwann_mouse             4 #> mouse1_lib1.final_cell_0005     delta_mouse             3 #> mouse1_lib1.final_cell_0006      beta_mouse             1"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"visualise-clustering-results","dir":"Articles","previous_headings":"","what":"Visualise clustering results","title":"Getting Start with Assisted CIDER (asCIDER)","text":"","code":"plot_list <- list() plot_list[[1]] <- scatterPlot(seu, \"tsne\", colour.by = \"CIDER_cluster\", title = \"asCIDER clustering results\")  plot_list[[2]] <- scatterPlot(seu, \"tsne\", colour.by = \"Group\", title = \"Ground truth of cell populations\")  plot_grid(plotlist = plot_list, ncol = 2) res <- data.frame(table(seu$CIDER_cluster, seu$Batch)) ggplot(res, aes(fill=Var2, y=Freq, x=Var1)) +      geom_bar(position=\"stack\", stat=\"identity\") + xlab(\"CIDER_cluster\") + ylab(\"Proportions\")"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Getting Start with Assisted CIDER (asCIDER)","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-apple-darwin20 #> Running under: macOS Monterey 12.5.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/London #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] viridis_0.6.5      viridisLite_0.4.2  cowplot_1.1.3      ggplot2_3.5.1      #> [5] pheatmap_1.0.12    Seurat_5.1.0       SeuratObject_5.0.2 sp_2.1-4           #> [9] CIDER_0.99.2       #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3     rstudioapi_0.16.0      jsonlite_1.8.8         #>   [4] magrittr_2.0.3         spatstat.utils_3.1-0   farver_2.1.2           #>   [7] rmarkdown_2.27         fs_1.6.4               ragg_1.3.2             #>  [10] vctrs_0.6.5            ROCR_1.0-11            spatstat.explore_3.3-2 #>  [13] htmltools_0.5.8.1      sass_0.4.9             sctransform_0.4.1      #>  [16] parallelly_1.38.0      KernSmooth_2.23-24     bslib_0.7.0            #>  [19] htmlwidgets_1.6.4      desc_1.4.3             ica_1.0-3              #>  [22] plyr_1.8.9             plotly_4.10.4          zoo_1.8-12             #>  [25] cachem_1.1.0           igraph_2.0.3           mime_0.12              #>  [28] lifecycle_1.0.4        iterators_1.0.14       pkgconfig_2.0.3        #>  [31] Matrix_1.7-0           R6_2.5.1               fastmap_1.2.0          #>  [34] fitdistrplus_1.2-1     future_1.34.0          shiny_1.9.1            #>  [37] digest_0.6.37          colorspace_2.1-1       patchwork_1.2.0        #>  [40] tensor_1.5             RSpectra_0.16-2        irlba_2.3.5.1          #>  [43] textshaping_0.4.0      labeling_0.4.3         progressr_0.14.0       #>  [46] fansi_1.0.6            spatstat.sparse_3.1-0  httr_1.4.7             #>  [49] polyclip_1.10-7        abind_1.4-5            compiler_4.4.1         #>  [52] withr_3.0.1            doParallel_1.0.17      fastDummies_1.7.4      #>  [55] highr_0.11             MASS_7.3-61            tools_4.4.1            #>  [58] lmtest_0.9-40          httpuv_1.6.15          future.apply_1.11.2    #>  [61] goftest_1.2-3          glue_1.7.0             dbscan_1.2.2           #>  [64] nlme_3.1-165           promises_1.3.0         grid_4.4.1             #>  [67] Rtsne_0.17             cluster_2.1.6          reshape2_1.4.4         #>  [70] generics_0.1.3         gtable_0.3.5           spatstat.data_3.1-2    #>  [73] tidyr_1.3.1            data.table_1.16.0      utf8_1.2.4             #>  [76] spatstat.geom_3.3-2    RcppAnnoy_0.0.22       ggrepel_0.9.5          #>  [79] RANN_2.6.2             foreach_1.5.2          pillar_1.9.0           #>  [82] stringr_1.5.1          limma_3.60.6           spam_2.10-0            #>  [85] RcppHNSW_0.6.0         later_1.3.2            splines_4.4.1          #>  [88] dplyr_1.1.4            lattice_0.22-6         survival_3.7-0         #>  [91] deldir_2.0-4           tidyselect_1.2.1       locfit_1.5-9.10        #>  [94] miniUI_0.1.1.1         pbapply_1.7-2          knitr_1.48             #>  [97] gridExtra_2.3          edgeR_4.2.2            scattermore_1.2        #> [100] xfun_0.46              statmod_1.5.0          matrixStats_1.4.1      #> [103] stringi_1.8.4          lazyeval_0.2.2         yaml_2.3.10            #> [106] evaluate_0.24.0        codetools_0.2-20       kernlab_0.9-33         #> [109] tibble_3.2.1           cli_3.6.3              uwot_0.2.2             #> [112] xtable_1.8-4           reticulate_1.39.0      systemfonts_1.1.0      #> [115] munsell_0.5.1          jquerylib_0.1.4        Rcpp_1.0.13            #> [118] globals_0.16.3         spatstat.random_3.3-1  png_0.1-8              #> [121] spatstat.univar_3.0-1  parallel_4.4.1         pkgdown_2.1.0          #> [124] dotCall64_1.1-1        listenv_0.9.1          scales_1.3.0           #> [127] ggridges_0.5.6         leiden_0.4.3.1         purrr_1.0.2            #> [130] rlang_1.1.4"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/asCIDER.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting Start with Assisted CIDER (asCIDER)","text":"Baron, M. et al. Single-Cell Transcriptomic Map Human Mouse Pancreas Reveals Inter- Intra-cell Population Structure. Cell Syst 3, 346–360.e4 (2016). Satija R, et al. Spatial reconstruction single-cell gene expression data. Nature Biotechnology 33, 495-502 (2015).","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"vignette performs dnCIDER cross-species pancreas dataset. aimed show underneath structure dnCIDER compared high-level vignette (see Getting Start De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration).","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"addition CIDER, load following packages:","code":"library(CIDER) library(Seurat) #> Loading required package: SeuratObject #> Loading required package: sp #> 'SeuratObject' was built under R 4.4.0 but the current version is #> 4.4.1; it is recomended that you reinstall 'SeuratObject' as the ABI #> for R may have changed #>  #> Attaching package: 'SeuratObject' #> The following objects are masked from 'package:base': #>  #>     intersect, t library(parallel) library(cowplot)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER.html","id":"load-example-data","dir":"Articles","previous_headings":"","what":"Load example data","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"example data can downloaded https://figshare.com/s/d5474749ca8c711cc205. Pancreatic cell data1^1 contain cells human (8241 cells) mouse (1886 cells).","code":"load(\"../data/pancreas_counts.RData\") # count matrix load(\"../data/pancreas_meta.RData\") # meta data/cell information seu <- CreateSeuratObject(counts = pancreas_counts, meta.data = pancreas_meta) table(seu$Batch) #>  #> human mouse  #>  8241  1886"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER.html","id":"perform-initial-clustering","dir":"Articles","previous_headings":"","what":"Perform initial clustering","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"","code":"seu_list <- Seurat::SplitObject(seu, split.by = \"Batch\") seu_list <- mclapply(seu_list, function(x) {   x <- NormalizeData(x, normalization.method = \"LogNormalize\",                       scale.factor = 10000, verbose = FALSE)   x <- FindVariableFeatures(x, selection.method = \"vst\",                              nfeatures = 2000, verbose = FALSE)   x <- ScaleData(x, verbose = FALSE, vars.to.regress = \"Sample\")   x <- RunPCA(x, features = VariableFeatures(object = x), verbose = FALSE)     x <- FindNeighbors(x, dims = 1:15, verbose = FALSE)   x <- FindClusters(x, resolution = 0.6, verbose = FALSE)   return(x) }) knitr::kable(table(seu_list[[2]]$Group, seu_list[[2]]$seurat_clusters)) seu_list <- mclapply(seu_list, RunTSNE, dims = 1:15) p1 <- scatterPlot(seu_list[[1]], \"tsne\", colour.by = \"seurat_clusters\") p2 <- scatterPlot(seu_list[[2]], \"tsne\", colour.by = \"seurat_clusters\") cowplot::plot_grid(p1,p2) dist_coef <- getDistMat(seu_list, downsampling.size = 50) #>   |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100% par(mfrow = c(length(seu_list),1)) for(i in which(sapply(dist_coef, function(x) return(!is.null(x))))){   tmp <- dist_coef[[i]] + t(dist_coef[[i]])   diag(tmp) <- 1   pheatmap::pheatmap(tmp, display_numbers = TRUE) } for(seu_itor in 1:2){   tmp <- dist_coef[[seu_itor]] + t(dist_coef[[seu_itor]])   diag(tmp) <- 1   tmp <- 1 - tmp   hc <- hclust(as.dist(tmp), method = \"average\")   hres <- cutree(hc, h = 0.4)   df_hres <- data.frame(hres)   df_hres$hres <- paste0(df_hres$hres, \"_\", unique(seu_list[[seu_itor]]$Batch))   seu_list[[seu_itor]]$inicluster_tmp <- paste0(seu_list[[seu_itor]]$seurat_clusters, \"_\", seu_list[[seu_itor]]$Batch)   seu_list[[seu_itor]]$inicluster <- df_hres$hres[match(seu_list[[seu_itor]]$inicluster_tmp,rownames(df_hres))] } # plot(as.dendrogram(hc), horiz = T) p1 <- scatterPlot(seu_list[[1]], \"tsne\", \"inicluster\") p2 <- scatterPlot(seu_list[[2]], \"tsne\", \"inicluster\") plot_grid(p1,p2) scatterPlot(seu_list[[2]], \"tsne\", \"Group\")"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER.html","id":"calculate-of-ider-similarity-matrix","dir":"Articles","previous_headings":"","what":"Calculate of IDER similarity matrix","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"","code":"res <- unlist(lapply(seu_list, function(x) return(x$inicluster))) res_names <- unlist(lapply(seu_list, function(x) return(colnames(x)))) seu@meta.data$initial_cluster <- res[match(colnames(seu), res_names)]  ider <- getIDEr(seu,                  group.by.var = \"initial_cluster\",                 batch.by.var = \"Batch\",                 downsampling.size = 35,                  use.parallel = FALSE, verbose = FALSE) net <- plotNetwork(seu, ider, colour.by = \"Group\" , vertex.size = 0.6, weight.factor = 5) hc <- hclust(as.dist(1-(ider[[1]] + t(ider[[1]])))/2) plot(as.dendrogram(hc)) #, horiz = TRUE"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER.html","id":"perform-final-clustering","dir":"Articles","previous_headings":"","what":"Perform final Clustering","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"","code":"seu <- finalClustering(seu, ider, cutree.h = 0.35) # final clustering seu <- NormalizeData(seu, verbose = FALSE) seu <- FindVariableFeatures(seu, selection.method = \"vst\",                              nfeatures = 2000, verbose = FALSE) seu <- ScaleData(seu, verbose = FALSE) seu <- RunPCA(seu, npcs = 20, verbose = FALSE) seu <- RunTSNE(seu, reduction = \"pca\", dims = 1:12) plot_list <- list() plot_list[[1]] <- scatterPlot(seu, \"tsne\", colour.by = \"CIDER_cluster\", title = \"asCIDER clustering results\")  plot_list[[2]] <- scatterPlot(seu, \"tsne\", colour.by = \"Group\", title = \"Ground truth of cell populations\")  plot_grid(plotlist = plot_list, ncol = 2)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-apple-darwin20 #> Running under: macOS Monterey 12.5.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/London #> tzcode source: internal #>  #> attached base packages: #> [1] parallel  stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] cowplot_1.1.3      Seurat_5.1.0       SeuratObject_5.0.2 sp_2.1-4           #> [5] CIDER_0.99.2       #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3     rstudioapi_0.16.0      jsonlite_1.8.8         #>   [4] magrittr_2.0.3         spatstat.utils_3.1-0   farver_2.1.2           #>   [7] rmarkdown_2.27         fs_1.6.4               ragg_1.3.2             #>  [10] vctrs_0.6.5            ROCR_1.0-11            spatstat.explore_3.3-2 #>  [13] htmltools_0.5.8.1      sass_0.4.9             sctransform_0.4.1      #>  [16] parallelly_1.38.0      KernSmooth_2.23-24     bslib_0.7.0            #>  [19] htmlwidgets_1.6.4      desc_1.4.3             ica_1.0-3              #>  [22] plyr_1.8.9             plotly_4.10.4          zoo_1.8-12             #>  [25] cachem_1.1.0           igraph_2.0.3           mime_0.12              #>  [28] lifecycle_1.0.4        iterators_1.0.14       pkgconfig_2.0.3        #>  [31] Matrix_1.7-0           R6_2.5.1               fastmap_1.2.0          #>  [34] fitdistrplus_1.2-1     future_1.34.0          shiny_1.9.1            #>  [37] digest_0.6.37          colorspace_2.1-1       patchwork_1.2.0        #>  [40] tensor_1.5             RSpectra_0.16-2        irlba_2.3.5.1          #>  [43] textshaping_0.4.0      labeling_0.4.3         progressr_0.14.0       #>  [46] fansi_1.0.6            spatstat.sparse_3.1-0  httr_1.4.7             #>  [49] polyclip_1.10-7        abind_1.4-5            compiler_4.4.1         #>  [52] withr_3.0.1            doParallel_1.0.17      viridis_0.6.5          #>  [55] fastDummies_1.7.4      highr_0.11             MASS_7.3-61            #>  [58] tools_4.4.1            lmtest_0.9-40          httpuv_1.6.15          #>  [61] future.apply_1.11.2    goftest_1.2-3          glue_1.7.0             #>  [64] dbscan_1.2.2           nlme_3.1-165           promises_1.3.0         #>  [67] grid_4.4.1             Rtsne_0.17             cluster_2.1.6          #>  [70] reshape2_1.4.4         generics_0.1.3         gtable_0.3.5           #>  [73] spatstat.data_3.1-2    tidyr_1.3.1            data.table_1.16.0      #>  [76] utf8_1.2.4             spatstat.geom_3.3-2    RcppAnnoy_0.0.22       #>  [79] ggrepel_0.9.5          RANN_2.6.2             foreach_1.5.2          #>  [82] pillar_1.9.0           stringr_1.5.1          limma_3.60.6           #>  [85] spam_2.10-0            RcppHNSW_0.6.0         later_1.3.2            #>  [88] splines_4.4.1          dplyr_1.1.4            lattice_0.22-6         #>  [91] survival_3.7-0         deldir_2.0-4           tidyselect_1.2.1       #>  [94] locfit_1.5-9.10        miniUI_0.1.1.1         pbapply_1.7-2          #>  [97] knitr_1.48             gridExtra_2.3          edgeR_4.2.2            #> [100] scattermore_1.2        xfun_0.46              statmod_1.5.0          #> [103] matrixStats_1.4.1      pheatmap_1.0.12        stringi_1.8.4          #> [106] lazyeval_0.2.2         yaml_2.3.10            evaluate_0.24.0        #> [109] codetools_0.2-20       kernlab_0.9-33         tibble_3.2.1           #> [112] cli_3.6.3              uwot_0.2.2             xtable_1.8-4           #> [115] reticulate_1.39.0      systemfonts_1.1.0      munsell_0.5.1          #> [118] jquerylib_0.1.4        Rcpp_1.0.13            globals_0.16.3         #> [121] spatstat.random_3.3-1  png_0.1-8              spatstat.univar_3.0-1  #> [124] pkgdown_2.1.0          ggplot2_3.5.1          dotCall64_1.1-1        #> [127] listenv_0.9.1          viridisLite_0.4.2      scales_1.3.0           #> [130] ggridges_0.5.6         leiden_0.4.3.1         purrr_1.0.2            #> [133] rlang_1.1.4"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Detailed walk-through of de novo CIDER (dnCIDER) on pancreas data","text":"Baron, M. et al. Single-Cell Transcriptomic Map Human Mouse Pancreas Reveals Inter- Intra-cell Population Structure. Cell Syst 3, 346–360.e4 (2016). Satija R, et al. Spatial reconstruction single-cell gene expression data. Nature Biotechnology 33, 495-502 (2015).","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"what-is-dncider","dir":"Articles","previous_headings":"","what":"What is dnCIDER?","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"dnCIDER computational method designed integrative analysis single-cell RNA-seq data across batches species. vignette demonstrates application human-mouse pancreas dataset, showing identify conserved cell populations across species.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"addition CIDER, load following packages:","code":"library(CIDER) library(Seurat) #> Loading required package: SeuratObject #> Loading required package: sp #> 'SeuratObject' was built under R 4.4.0 but the current version is #> 4.4.1; it is recomended that you reinstall 'SeuratObject' as the ABI #> for R may have changed #>  #> Attaching package: 'SeuratObject' #> The following objects are masked from 'package:base': #>  #>     intersect, t library(parallel) library(cowplot)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"load-pancreas-data","dir":"Articles","previous_headings":"","what":"Load pancreas data","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"example data can downloaded https://figshare.com/s/d5474749ca8c711cc205. Pancreatic cell data1^1 contain cells human (8241 cells) mouse (1886 cells).","code":"# Load counts matrix and metadata load(\"../data/pancreas_counts.RData\") # count matrix load(\"../data/pancreas_meta.RData\") # meta data/cell information  # Create Seurat object seu <- CreateSeuratObject(counts = pancreas_counts, meta.data = pancreas_meta)  # Check batch composition table(seu$Batch) #>  #> human mouse  #>  8241  1886"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"perform-dncider-high-level","dir":"Articles","previous_headings":"","what":"Perform dnCIDER (high-level)","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"DnCIDER contains three steps.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"step-1-initial-clustering","dir":"Articles","previous_headings":"Perform dnCIDER (high-level)","what":"Step 1: Initial Clustering","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"Performs preprocessing generates initial clusters within batch:","code":"seu <- initialClustering(   seu,   additional.vars.to.regress = \"Sample\",  # Regress out sample-specific effects   dims = 1:15                             # PCA dimensions to use ) #>   |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"step-2-compute-ider","dir":"Articles","previous_headings":"Perform dnCIDER (high-level)","what":"Step 2: Compute IDER","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"Estimates batch-corrected similarity matrices:","code":"ider <- getIDEr(   seu,   downsampling.size = 35,   # Cells per cluster for downsampling   use.parallel = FALSE,     # Disable parallelization for reproducibility   verbose = FALSE           # Suppress progress messages )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"step-3-final-integrated-clustering","dir":"Articles","previous_headings":"Perform dnCIDER (high-level)","what":"Step 3: Final Integrated Clustering","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"Merges clusters using IDER-derived similarities:","code":"seu <- finalClustering(   seu,   ider,   cutree.h = 0.35  # Height for hierarchical clustering cut )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"visualise-clustering-results","dir":"Articles","previous_headings":"","what":"Visualise clustering results","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"use Seurat pipeline perform normalisation (NormalizeData), preprocessing (FindVariableFeatures ScaleData) dimension reduction (RunPCA RunTSNE). Next plot integrated clusters vs. ground truth. comparing dnCIDER results cell annotation publication1^1, observe dnCIDER correctly identify majority populations across two species.  Interpretation: dnCIDER successfully aligns human (prefix h) mouse (m) cell types. example: Beta cells (hBeta/mBeta) form unified cluster Alpha cells (hAlpha/mAlpha) show cross-species alignment Minor populations like Acinar Ductal conserved","code":"# Preprocessing for Visualization seu <- NormalizeData(seu, verbose = FALSE) seu <- FindVariableFeatures(seu, selection.method = \"vst\", nfeatures = 2000, verbose = FALSE) seu <- ScaleData(seu, verbose = FALSE) seu <- RunPCA(seu, npcs = 20, verbose = FALSE) seu <- RunTSNE(seu, reduction = \"pca\", dims = 1:12) # Generate plots p1 <- scatterPlot(seu, \"tsne\",                    colour.by = \"CIDER_cluster\",                    title = \"Integrated Clusters (dnCIDER)\")  p2 <- scatterPlot(seu, \"tsne\",                    colour.by = \"Group\",                    title = \"Original Cell Types\")  # Arrange side-by-side plot_grid(p1, p2, ncol = 2)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"notes-best-practices","dir":"Articles","previous_headings":"","what":"Notes & Best Practices","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"Downsampling Size: Adjust downsampling.size (default: 35) clusters small. Batch Variable: Ensure Seurat object contains batch identifier (default column name: \"Batch\"). Visualization: Always validate integration using known marker genes addition embeddings. Runtime: large datasets, enable parallelization use.parallel = TRUE.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-apple-darwin20 #> Running under: macOS Monterey 12.5.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/London #> tzcode source: internal #>  #> attached base packages: #> [1] parallel  stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] cowplot_1.1.3      Seurat_5.1.0       SeuratObject_5.0.2 sp_2.1-4           #> [5] CIDER_0.99.2       #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3     rstudioapi_0.16.0      jsonlite_1.8.8         #>   [4] magrittr_2.0.3         spatstat.utils_3.1-0   farver_2.1.2           #>   [7] rmarkdown_2.27         fs_1.6.4               ragg_1.3.2             #>  [10] vctrs_0.6.5            ROCR_1.0-11            spatstat.explore_3.3-2 #>  [13] htmltools_0.5.8.1      sass_0.4.9             sctransform_0.4.1      #>  [16] parallelly_1.38.0      KernSmooth_2.23-24     bslib_0.7.0            #>  [19] htmlwidgets_1.6.4      desc_1.4.3             ica_1.0-3              #>  [22] plyr_1.8.9             plotly_4.10.4          zoo_1.8-12             #>  [25] cachem_1.1.0           igraph_2.0.3           mime_0.12              #>  [28] lifecycle_1.0.4        iterators_1.0.14       pkgconfig_2.0.3        #>  [31] Matrix_1.7-0           R6_2.5.1               fastmap_1.2.0          #>  [34] fitdistrplus_1.2-1     future_1.34.0          shiny_1.9.1            #>  [37] digest_0.6.37          colorspace_2.1-1       patchwork_1.2.0        #>  [40] tensor_1.5             RSpectra_0.16-2        irlba_2.3.5.1          #>  [43] textshaping_0.4.0      labeling_0.4.3         progressr_0.14.0       #>  [46] fansi_1.0.6            spatstat.sparse_3.1-0  httr_1.4.7             #>  [49] polyclip_1.10-7        abind_1.4-5            compiler_4.4.1         #>  [52] withr_3.0.1            doParallel_1.0.17      viridis_0.6.5          #>  [55] fastDummies_1.7.4      highr_0.11             MASS_7.3-61            #>  [58] tools_4.4.1            lmtest_0.9-40          httpuv_1.6.15          #>  [61] future.apply_1.11.2    goftest_1.2-3          glue_1.7.0             #>  [64] dbscan_1.2.2           nlme_3.1-165           promises_1.3.0         #>  [67] grid_4.4.1             Rtsne_0.17             cluster_2.1.6          #>  [70] reshape2_1.4.4         generics_0.1.3         gtable_0.3.5           #>  [73] spatstat.data_3.1-2    tidyr_1.3.1            data.table_1.16.0      #>  [76] utf8_1.2.4             spatstat.geom_3.3-2    RcppAnnoy_0.0.22       #>  [79] ggrepel_0.9.5          RANN_2.6.2             foreach_1.5.2          #>  [82] pillar_1.9.0           stringr_1.5.1          limma_3.60.6           #>  [85] spam_2.10-0            RcppHNSW_0.6.0         later_1.3.2            #>  [88] splines_4.4.1          dplyr_1.1.4            lattice_0.22-6         #>  [91] survival_3.7-0         deldir_2.0-4           tidyselect_1.2.1       #>  [94] locfit_1.5-9.10        miniUI_0.1.1.1         pbapply_1.7-2          #>  [97] knitr_1.48             gridExtra_2.3          edgeR_4.2.2            #> [100] scattermore_1.2        xfun_0.46              statmod_1.5.0          #> [103] matrixStats_1.4.1      pheatmap_1.0.12        stringi_1.8.4          #> [106] lazyeval_0.2.2         yaml_2.3.10            evaluate_0.24.0        #> [109] codetools_0.2-20       kernlab_0.9-33         tibble_3.2.1           #> [112] cli_3.6.3              uwot_0.2.2             xtable_1.8-4           #> [115] reticulate_1.39.0      systemfonts_1.1.0      munsell_0.5.1          #> [118] jquerylib_0.1.4        Rcpp_1.0.13            globals_0.16.3         #> [121] spatstat.random_3.3-1  png_0.1-8              spatstat.univar_3.0-1  #> [124] pkgdown_2.1.0          ggplot2_3.5.1          dotCall64_1.1-1        #> [127] listenv_0.9.1          viridisLite_0.4.2      scales_1.3.0           #> [130] ggridges_0.5.6         leiden_0.4.3.1         purrr_1.0.2            #> [133] rlang_1.1.4"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/dnCIDER_highlevel.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting Start with De Novo CIDER (dnCIDER): Cross-Species Pancreas Integration","text":"Baron, M. et al. Single-Cell Transcriptomic Map Human Mouse Pancreas Reveals Inter- Intra-cell Population Structure. Cell Syst 3, 346–360.e4 (2016). Satija R, et al. Spatial reconstruction single-cell gene expression data. Nature Biotechnology 33, 495-502 (2015).","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"why-evaluate-integration","dir":"Articles","previous_headings":"","what":"Why Evaluate Integration?","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"Single-cell RNA-seq integration methods aim remove technical batch effects preserving biological variation. CIDER provides ground-truth-free approach : Identify well-integrated cell populations Detect potentially incorrect integrations Quantify integration confidence empirical p-values vignette focuses showing process using example data dendritic cells.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"Apart CIDER, following packages also need loaded:","code":"library(CIDER) library(Seurat) library(cowplot) library(ggplot2)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"load-dendritic-data","dir":"Articles","previous_headings":"","what":"Load dendritic data","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"example data can downloaded https://figshare.com/s/d5474749ca8c711cc205. dataset contains 26593 genes 564 cells across 2 batches.","code":"load(\"../data/dendritic.rda\") dendritic <- CreateSeuratObject(counts = dendritic@assays$RNA@counts, meta.data = dendritic@meta.data) # Verify batch composition table(dendritic$Batch) #>  #> Batch1 Batch2  #>    281    283"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"perform-integration-with-seurat","dir":"Articles","previous_headings":"","what":"Perform integration with Seurat","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"First integration method1^1 applied dendritic data. can apply integration methods data, long correct PCs stored Seurat object, .e. Reductions(seu.integrated, \"pca\") seu.integrated@reductions$pca. Clear intermediate outcome.","code":"seu.list <- SplitObject(dendritic, split.by = \"Batch\") for (i in 1:length(seu.list)) {   seu.list[[i]] <- NormalizeData(seu.list[[i]], verbose = FALSE)   seu.list[[i]] <- FindVariableFeatures(seu.list[[i]],                                          selection.method = \"vst\",                                          nfeatures = 1000, verbose = FALSE) } seu.anchors <- FindIntegrationAnchors(object.list = seu.list,                                        dims = 1:15, verbose = FALSE) seu.integrated <- IntegrateData(anchorset = seu.anchors,                                  dims = 1:15, verbose = FALSE)  DefaultAssay(seu.integrated) <- \"integrated\" seu.integrated <- ScaleData(seu.integrated, verbose = FALSE) seu.integrated <- RunPCA(seu.integrated, verbose = FALSE) seu.integrated <- RunTSNE(seu.integrated, reduction = \"pca\", dims = 1:5) rm(seu.list, seu.anchors) gc() #>            used  (Mb) gc trigger  (Mb) limit (Mb)  max used  (Mb) #> Ncells  3944761 210.7    7428785 396.8         NA   7428785 396.8 #> Vcells 22980310 175.4   82929612 632.8      32768 103661998 790.9"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"cider-evaluation-workflow","dir":"Articles","previous_headings":"","what":"CIDER Evaluation Workflow","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"CIDER evaluates integration results three steps.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"step-1-density-based-clustering","dir":"Articles","previous_headings":"CIDER Evaluation Workflow","what":"Step 1: Density-Based Clustering","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"Clustering based corrected PCs (hdbscan.seurat). step uses HDBSCAN, density-based clustering algorithm2^2. clustering results stored seu.integrated$dbscan_cluster. Clusters divided batch-specific clusters concatenating dbscan_cluster batch, stored seu.integrated$initial_cluster.","code":"seu.integrated <- hdbscan.seurat(seu.integrated)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"step-2-calculate-cluster-similarities","dir":"Articles","previous_headings":"CIDER Evaluation Workflow","what":"Step 2: Calculate Cluster Similarities","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"Compute IDER-based similarity matrix (getIDEr) among batch-specific initial clusters. multiple CPUs availble, can set use.parallel = TRUE n.cores number available cores speed .","code":"ider <- getIDEr(seu.integrated, use.parallel = FALSE, verbose = FALSE)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"step-3-compute-integration-confidence","dir":"Articles","previous_headings":"CIDER Evaluation Workflow","what":"Step 3: Compute Integration Confidence","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"Assign similarity estimate empirical p values (estimateProb) correctness integration. High similarity values low p values indicate cell similar surrounding cells likely integrated correctly.","code":"seu.integrated <- estimateProb(seu.integrated, ider)"},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"evaluation-scores","dir":"Articles","previous_headings":"Visual Evaluation","what":"Evaluation scores","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"evaluation scores can viewed scatterPlot . shown cells dbscan_cluster 2 3 low regional similarity high empirical p values, suggesting can incorrectly integrated.  Interpretation Guide: ✅ High similarity + Low p-value: Well-integrated regions ❌ Low similarity + High p-value: Potential integration errors","code":"p1 <- scatterPlot(seu.integrated, \"tsne\", \"dbscan_cluster\") p2 <- scatterPlot(seu.integrated, \"tsne\", colour.by = \"similarity\") + labs(fill = \"Similarity\") p3 <- scatterPlot(seu.integrated, \"tsne\", colour.by = \"pvalue\") + labs(fill = \"Prob of \\nrejection\") plot_grid(p1, p2, p3, ncol = 3)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"the-ider-based-similarity-network","dir":"Articles","previous_headings":"Visual Evaluation","what":"The IDER-based Similarity Network","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"insight, can view IDER-based similarity matrix functions plotNetwork plotHeatmap. require input Seurat object output getIDEr. example, 1_Batch1 1_Batch2 well 4_Batch1 4_Batch2 high similarity. plotNetwork generates graph vertexes initial clusters edge widths similarity values. parameter weight.factor controls scale edge widths; larger weight.factor give bolder edges proportionally.","code":"plotNetwork(seu.integrated, ider, weight.factor = 3) #> IGRAPH 00150e7 UNW- 10 12 --  #> + attr: name (v/c), frame.color (v/c), size (v/n), label.family (v/c), #> | weight (e/n), width (e/n) #> + edges from 00150e7 (vertex names): #>  [1] 4_Batch1--4_Batch2 4_Batch1--3_Batch2 3_Batch1--4_Batch2 3_Batch1--3_Batch2 #>  [5] 3_Batch1--2_Batch2 2_Batch1--3_Batch2 2_Batch1--2_Batch2 0_Batch1--0_Batch2 #>  [9] 0_Batch1--2_Batch2 1_Batch1--0_Batch2 1_Batch1--1_Batch2 1_Batch1--2_Batch2"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"cluster-similarity-heatmap","dir":"Articles","previous_headings":"Visual Evaluation","what":"Cluster Similarity Heatmap","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"plotHeatmap generates heatmap cell coloured labeled similarity values.","code":"plotHeatmap(seu.integrated, ider)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"validation-against-ground-truth-annotation","dir":"Articles","previous_headings":"","what":"Validation Against Ground Truth Annotation","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"far evaluation completed CIDER used ground truth ! Let’s peep ground truth closure vignette. shown figure , clusters low IDER-based similarity high p values actually least two populations (CD1C CD141), verifying CIDER spots wrongly integrated cells.","code":"scatterPlot(seu.integrated, \"tsne\", colour.by = \"Group\") + labs(fill = \"Group\\n (ground truth)\")"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"Parameter Tuning: Adjust hdbscan.seurat parameters initial clustering granular Modify cutree.h estimateProb change confidence thresholds Interpretation Tips: Always validate suspicious joint clusters marker genes Scalability: large datasets (>10k cells), enable parallel processing use.parallel=TRUE","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-apple-darwin20 #> Running under: macOS Monterey 12.5.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/London #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1      cowplot_1.1.3      Seurat_5.1.0       SeuratObject_5.0.2 #> [5] sp_2.1-4           CIDER_0.99.2       #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3     rstudioapi_0.16.0      jsonlite_1.8.8         #>   [4] magrittr_2.0.3         spatstat.utils_3.1-0   farver_2.1.2           #>   [7] rmarkdown_2.27         fs_1.6.4               ragg_1.3.2             #>  [10] vctrs_0.6.5            ROCR_1.0-11            spatstat.explore_3.3-2 #>  [13] htmltools_0.5.8.1      sass_0.4.9             sctransform_0.4.1      #>  [16] parallelly_1.38.0      KernSmooth_2.23-24     bslib_0.7.0            #>  [19] htmlwidgets_1.6.4      desc_1.4.3             ica_1.0-3              #>  [22] plyr_1.8.9             plotly_4.10.4          zoo_1.8-12             #>  [25] cachem_1.1.0           igraph_2.0.3           mime_0.12              #>  [28] lifecycle_1.0.4        iterators_1.0.14       pkgconfig_2.0.3        #>  [31] Matrix_1.7-0           R6_2.5.1               fastmap_1.2.0          #>  [34] fitdistrplus_1.2-1     future_1.34.0          shiny_1.9.1            #>  [37] digest_0.6.37          colorspace_2.1-1       patchwork_1.2.0        #>  [40] tensor_1.5             RSpectra_0.16-2        irlba_2.3.5.1          #>  [43] textshaping_0.4.0      labeling_0.4.3         progressr_0.14.0       #>  [46] fansi_1.0.6            spatstat.sparse_3.1-0  httr_1.4.7             #>  [49] polyclip_1.10-7        abind_1.4-5            compiler_4.4.1         #>  [52] withr_3.0.1            doParallel_1.0.17      viridis_0.6.5          #>  [55] fastDummies_1.7.4      highr_0.11             MASS_7.3-61            #>  [58] tools_4.4.1            lmtest_0.9-40          httpuv_1.6.15          #>  [61] future.apply_1.11.2    goftest_1.2-3          glue_1.7.0             #>  [64] dbscan_1.2.2           nlme_3.1-165           promises_1.3.0         #>  [67] grid_4.4.1             Rtsne_0.17             cluster_2.1.6          #>  [70] reshape2_1.4.4         generics_0.1.3         gtable_0.3.5           #>  [73] spatstat.data_3.1-2    tidyr_1.3.1            data.table_1.16.0      #>  [76] utf8_1.2.4             spatstat.geom_3.3-2    RcppAnnoy_0.0.22       #>  [79] ggrepel_0.9.5          RANN_2.6.2             foreach_1.5.2          #>  [82] pillar_1.9.0           stringr_1.5.1          limma_3.60.6           #>  [85] spam_2.10-0            RcppHNSW_0.6.0         later_1.3.2            #>  [88] splines_4.4.1          dplyr_1.1.4            lattice_0.22-6         #>  [91] survival_3.7-0         deldir_2.0-4           tidyselect_1.2.1       #>  [94] locfit_1.5-9.10        miniUI_0.1.1.1         pbapply_1.7-2          #>  [97] knitr_1.48             gridExtra_2.3          edgeR_4.2.2            #> [100] scattermore_1.2        xfun_0.46              statmod_1.5.0          #> [103] matrixStats_1.4.1      pheatmap_1.0.12        stringi_1.8.4          #> [106] lazyeval_0.2.2         yaml_2.3.10            evaluate_0.24.0        #> [109] codetools_0.2-20       kernlab_0.9-33         tibble_3.2.1           #> [112] cli_3.6.3              uwot_0.2.2             xtable_1.8-4           #> [115] reticulate_1.39.0      systemfonts_1.1.0      munsell_0.5.1          #> [118] jquerylib_0.1.4        Rcpp_1.0.13            globals_0.16.3         #> [121] spatstat.random_3.3-1  png_0.1-8              spatstat.univar_3.0-1  #> [124] parallel_4.4.1         pkgdown_2.1.0          dotCall64_1.1-1        #> [127] listenv_0.9.1          viridisLite_0.4.2      scales_1.3.0           #> [130] ggridges_0.5.6         leiden_0.4.3.1         purrr_1.0.2            #> [133] rlang_1.1.4"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/articles/evaluation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Evaluating scRNA-seq Integration Quality with CIDER","text":"Stuart Butler et al. Comprehensive Integration Single-Cell Data. Cell (2019). Campello, Ricardo JGB, Davoud Moulavi, Jörg Sander. “Density-based clustering based hierarchical density estimates.” Pacific-Asia conference knowledge discovery data mining. Springer, Berlin, Heidelberg, 2013.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhiyuan Hu. Author, maintainer. Christopher Yau. Author. Ahmed Ahmed. Author.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hu Z, Yau C, Ahmed (2025). CIDER: Interpretable Meta-Clustering Framework Single-Cell RNA-Seq Data Integration Evaluation. R package version 0.99.2, https://zhiyuan-hu-lab.github.io/CIDER/, https://github.com/zhiyuan-hu-lab/CIDER.","code":"@Manual{,   title = {CIDER: An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation},   author = {Zhiyuan Hu and Christopher Yau and Ahmed Ahmed},   year = {2025},   note = {R package version 0.99.2, https://zhiyuan-hu-lab.github.io/CIDER/},   url = {https://github.com/zhiyuan-hu-lab/CIDER}, }"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/index.html","id":"cider","dir":"","previous_headings":"","what":"An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation","title":"An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation","text":"CIDER meta-clustering workflow designed handle scRNA-seq data span multiple samples conditions. Often, datasets confounded batch effects variables. Many existing batch-removal methods assume near-identical cell population compositions across samples. CIDER, contrast, leverages inter-group similarity measures guide clustering without requiring strict assumptions. Genome Biology (2021) publication: CIDER article Original prototype: Hu et al., Cancer Cell 2020","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/index.html","id":"highlights","dir":"","previous_headings":"","what":"Highlights","title":"An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation","text":"Clustering: Overcome confounders scRNA-seq data (e.g., batch effects) without requiring identical cell-type composition. Evaluation metric: Assess whether integrated data methods like Seurat-CCA, Harmony, Scanorama preserve meaningful biological structure—prior cell-type labels required.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation","text":"can install CIDER github :","code":"# install.packages(\"devtools\") devtools::install_github('zhiyuan-hu-lab/CIDER')"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/index.html","id":"quick-start-using-cider-as-an-evaluation-metric","dir":"","previous_headings":"","what":"Quick Start: Using CIDER as an Evaluation Metric","title":"An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation","text":"already integrated scRNA-seq data (e.g., using Seurat-CCA, Harmony, Scanorama) want evaluate well biological populations align post-integration, can use CIDER follows. running CIDER evaluation functions, make sure Seurat object (e.g. seu.integrated) corrected PCs Seurat-CCA automatically put corrected PCs . methods used, corrected PCs can added using Run hdbscan clustering (optional) compute IDER score: Visualize evaluation scores t-SNE UMAP: evaluation scores (IDER-based similarity empirical p values) can visualised scatterPlot function. Evaluation scatterplot showing CIDER-based p-values similarity detailed walkthrough, see detailed tutorial evaluation","code":"seu.integrated@reductions$pca@cell.embeddings` seu.integrated@reductions$pca@cell.embeddings <- corrected.PCs library(CIDER) seu.integrated <- hdbscan.seurat(seu.integrated) ider <- getIDEr(seu.integrated, verbose = FALSE) seu.integrated <- estimateProb(seu.integrated, ider) p1 <- scatterPlot(seu.integrated, \"tsne\", colour.by = \"similarity\") p2 <- scatterPlot(seu.integrated, \"tsne\", colour.by = \"pvalue\")  plot_grid(p1,p2, ncol = 2)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/index.html","id":"using-cider-for-clustering-tasks","dir":"","previous_headings":"","what":"Using CIDER for Clustering Tasks","title":"An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation","text":"many scenarios, start integrated Seurat object still need cluster multi-batch scRNA-seq data robust way. CIDER provides meta-clustering approaches: asCIDER: initial batch-specific clusters. dnCIDER: initial cluster labels.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/index.html","id":"quick-start-with-ascider","dir":"","previous_headings":"Using CIDER for Clustering Tasks","what":"Quick Start with asCIDER","title":"An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation","text":"Seurat object (seu) : initial_cluster seu@meta.data per-batch clusters, Batch batch labels, two main steps : final clusters stored seu@meta.data$final_cluster (default). Detailed tutorial: asCIDER tutorial prior batch-specific clusters, see dnCIDER high-level dnCIDER detailed walk-.","code":"# Step 1: Compute IDER-based similarity ider <- getIDEr(seu,                  group.by.var = \"initial_cluster\",                 batch.by.var = \"Batch\")  # Step 2: Perform final clustering seu <- finalClustering(seu, ider, cutree.h = 0.45)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"An Interpretable Meta-Clustering Framework for Single-Cell RNA-Seq Data Integration and Evaluation","text":"find CIDER helpful research, please cite: Z. Hu, . . Ahmed, C. Yau. CIDER: interpretable meta-clustering framework single-cell RNA-seq data integration evaluation. Genome Biology 22, Article number: 337 (2021); doi: https://doi.org/10.1186/s13059-021-02561-2 Z. Hu, M. Artibani, . Alsaadi, N. Wietek, M. Morotti, T. Shi, Z. Zhong, L. Santana Gonzalez, S. El-Sahhar, M. KaramiNejadRanjbar, G. Mallett, Y. Feng, K. Masuda, Y. Zheng, K. Chong, S. Damato, S. Dhar, L. Campo, R. Garruto Campanile, V. Rai, D. Maldonado-Perez, S. Jones, V. Cerundolo, T. Sauka-Spengler, C. Yau, . . Ahmed. repertoire serous ovarian cancer non-genetic heterogeneity revealed single-cell sequencing normal fallopian tube epithelial cells. Cancer Cell 37 (2), p226-242.E7 (2020). doi: https://doi.org/10.1101/2021.03.29.437525","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/Merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather initial cluster names — gatherInitialClusters","title":"Gather initial cluster names — gatherInitialClusters","text":"Gather initial cluster names","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/Merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather initial cluster names — gatherInitialClusters","text":"","code":"gatherInitialClusters(seu_list, seu)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/Merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather initial cluster names — gatherInitialClusters","text":"seu_list list containing Seurat objects. Required. seu Seurat object","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/Merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather initial cluster names — gatherInitialClusters","text":"Seurat object containing initial clustering  results `seu$initial_cluster`.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/Merge.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Gather initial cluster names — gatherInitialClusters","text":"gatherInitialClusters(): initial clustering results Seurat object list one Seurat object. Follows function `mergeInitialClusters`.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/calculateDistMatOneModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Distance Matrix Using a Single Model — calculateDistMatOneModel","title":"Calculate Distance Matrix Using a Single Model — calculateDistMatOneModel","text":"function computes similarity matrix utilising single linear model differential expression analysis.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/calculateDistMatOneModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Distance Matrix Using a Single Model — calculateDistMatOneModel","text":"","code":"calculateDistMatOneModel(   matrix,   metadata,   verbose = TRUE,   method = \"voom\",   additional.variate = NULL )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/calculateDistMatOneModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Distance Matrix Using a Single Model — calculateDistMatOneModel","text":"matrix count matrix rows representing genes features columns representing samples cells. metadata data frame containing metadata corresponding samples cells. row match column matrix. verbose Logical. TRUE, function displays progress messages progress bar. default TRUE. method character string specifying method differential expression analysis. Options \"voom\" \"trend\", \"trend\" default. additional.variate character vector additional variates include linear model regression.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/calculateDistMatOneModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Distance Matrix Using a Single Model — calculateDistMatOneModel","text":"similarity matrix.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/cosineSimilarityR.html","id":null,"dir":"Reference","previous_headings":"","what":"cosine similarity in R — cosineSimilarityR","title":"cosine similarity in R — cosineSimilarityR","text":"cosine similarity R","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/cosineSimilarityR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cosine similarity in R — cosineSimilarityR","text":"","code":"cosineSimilarityR(x)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/cosineSimilarityR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cosine similarity in R — cosineSimilarityR","text":"x matrix","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/cosineSimilarityR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cosine similarity in R — cosineSimilarityR","text":"similarity matrix among rows input matrix","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/dendritic.html","id":null,"dir":"Reference","previous_headings":"","what":"Dendritic Data — dendritic","title":"Dendritic Data — dendritic","text":"dataset comprises data four dendritic cell subtypes (CD141, CD1C, DoubleNeg, pDC) two batches. raw count matrix sample information downloaded curated set, cells fewer 500 detected genes removed.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/dendritic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dendritic Data — dendritic","text":"","code":"data(dendritic)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/dendritic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dendritic Data — dendritic","text":"Seurat object.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/dendritic.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dendritic Data — dendritic","text":"data downloaded https://hub.docker.com/r/jinmiaochenlab/batch-effect-removal-benchmarking. Reference 1: Tran HTN, Ang KS, Chevrier M, Lee NYS, Goh M, Chen J. benchmark batch-effect correction methods single-cell RNA sequencing data. Genome Biol. 2020;21:1–32. Reference 2: Villani -C, Satija R, Reynolds G, Sarkizova S, Shekhar K, Fletcher J, et al. Single-cell RNA-seq reveals new types human blood dendritic cells, monocytes, progenitors. Science. 2017;356(6335).","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/dendritic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dendritic Data — dendritic","text":"Seurat object containing dendritic cell data.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/downsampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Downsampling Cells — downsampling","title":"Downsampling Cells — downsampling","text":"Downsamples cells group IDER-based similarity calculation.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/downsampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downsampling Cells — downsampling","text":"","code":"downsampling(   metadata,   n.size = 35,   seed = 12345,   include = FALSE,   replace = FALSE,   lower.cutoff = 3 )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/downsampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downsampling Cells — downsampling","text":"metadata data frame containing least two columns: one group labels one batch information. row corresponds single cell. Required. n.size Numeric value specifying number cells use group. Default 35. seed Numeric value set random seed sampling. Default 12345. include Logical value indicating whether include groups fewer cells n.size. Default FALSE. replace Logical value specifying whether sample replacement group smaller n.size. Default FALSE. lower.cutoff Numeric value indicating minimum group size required inclusion. Default 3.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/downsampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downsampling Cells — downsampling","text":"list numeric indices (cell names) cells kept downstream computation.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/downsampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downsampling Cells — downsampling","text":"","code":"if (FALSE) { # \\dontrun{   # 'meta' is a data frame with columns 'label' and 'batch'   keep_cells <- downsamplingCells(meta, n.size = 35, seed = 12345) } # }"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/estimateProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Empirical Probability of Whether Two Set of Cells from Distinct Batches Belong to the Same Population — estimateProb","title":"Estimate the Empirical Probability of Whether Two Set of Cells from Distinct Batches Belong to the Same Population — estimateProb","text":"function computes empirical probability two sets cells distinct batches belong population, based output getIDEr.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/estimateProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Empirical Probability of Whether Two Set of Cells from Distinct Batches Belong to the Same Population — estimateProb","text":"","code":"estimateProb(   seu,   ider,   batch.var = \"Batch\",   n_size = 40,   n.perm = 5,   verbose = FALSE )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/estimateProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Empirical Probability of Whether Two Set of Cells from Distinct Batches Belong to the Same Population — estimateProb","text":"seu Seurat object. ider list returned getIDEr function. batch.var Character string specifying metadata column contains batch information. Default \"Batch\". n_size Numeric value indicating number cells per group used compute similarity. Default 40. n.perm Numeric value specifying number permutations perform. verbose Logical. TRUE, progress messages printed. Default FALSE.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/estimateProb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Empirical Probability of Whether Two Set of Cells from Distinct Batches Belong to the Same Population — estimateProb","text":"Seurat object additional columns IDER-based similarity empirical probability rejection.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/finalClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Final Clustering Step for Meta-Clustering — finalClustering","title":"Final Clustering Step for Meta-Clustering — finalClustering","text":"function merges initial clusters final clusters based IDEr similarity matrix.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/finalClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Final Clustering Step for Meta-Clustering — finalClustering","text":"","code":"finalClustering(   seu,   dist,   cutree.by = \"h\",   cutree.h = 0.45,   cutree.k = 3,   hc.method = \"complete\" )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/finalClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Final Clustering Step for Meta-Clustering — finalClustering","text":"seu Seurat object undergone getIDEr step. Required. dist list output getIDEr function. Required. cutree.Character string specifying whether cut dendrogram height (\"h\") fixed number clusters (\"k\"). Default \"h\". cutree.h Numeric value 0 1 indicating height cut dendrogram. parameter ignored cutree.= \"k\". Default 0.45. cutree.k Numeric value specifying number clusters generate cutree.= \"k\". parameter ignored cutree.= \"h\". Default 3. hc.method Character string specifying method used hierarchical clustering (passed hclust).","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/finalClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Final Clustering Step for Meta-Clustering — finalClustering","text":"Seurat object final clustering results stored CIDER_clusters column meta.data.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/gatherInitialClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather Initial Cluster Names — gatherInitialClusters","title":"Gather Initial Cluster Names — gatherInitialClusters","text":"Merge initial clustering results list Seurat objects single Seurat object.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/gatherInitialClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather Initial Cluster Names — gatherInitialClusters","text":"","code":"gatherInitialClusters(seu_list, seu)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/gatherInitialClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather Initial Cluster Names — gatherInitialClusters","text":"seu_list list containing Seurat objects initial clustering results. Required. seu Seurat object merged initial cluster information added.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/gatherInitialClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather Initial Cluster Names — gatherInitialClusters","text":"Seurat object containing initial clustering results initial_cluster column meta.data.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getDistMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Similarity Matrix — getDistMat","title":"Calculate the Similarity Matrix — getDistMat","text":"Compute IDER-based similarity matrix list Seurat objects. function regress batch effects designed use initial clustering step.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getDistMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Similarity Matrix — getDistMat","text":"","code":"getDistMat(   seu_list,   verbose = TRUE,   tmp.initial.clusters = \"seurat_clusters\",   method = \"trend\",   batch.var = \"Batch\",   additional.variate = NULL,   downsampling.size = 35,   downsampling.include = TRUE,   downsampling.replace = TRUE )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getDistMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Similarity Matrix — getDistMat","text":"seu_list list containing Seurat objects. Required. verbose Logical. TRUE, progress messages progress bar displayed. Default TRUE. tmp.initial.clusters Character string specifying one column names Seurat@meta.data denotes groups, e.g., initial clusters. Default \"seurat_clusters\". method Character string specifying method differential expression analysis. Options \"voom\" \"trend\" (default \"trend\"). batch.var Character string specifying metadata column containing batch information. Default \"Batch\". additional.variate Character vector additional variates include linear model regression. downsampling.size Numeric value indicating number cells use per group. Default 35. downsampling.include Logical. Whether include groups fewer cells downsampling.size. Default TRUE. downsampling.replace Logical. Whether sample replacement groups smaller downsampling.size. Default TRUE.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getDistMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Similarity Matrix — getDistMat","text":"list similarity matrices.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getGroupFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate IDER-Based Similarity Between Two Groups — getGroupFit","title":"Calculate IDER-Based Similarity Between Two Groups — getGroupFit","text":"function calculates IDER-based similarity two groups using linear model.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getGroupFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate IDER-Based Similarity Between Two Groups — getGroupFit","text":"","code":"getGroupFit(logCPM, design, contrast_m)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getGroupFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate IDER-Based Similarity Between Two Groups — getGroupFit","text":"logCPM numeric matrix log-transformed counts per million. design design matrix differential expression analysis. contrast_m contrast matrix specifying comparison two groups.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getGroupFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate IDER-Based Similarity Between Two Groups — getGroupFit","text":"numeric value representing IDER-based similarity two groups.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getIDEr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute IDER-Based Similarity — getIDEr","title":"Compute IDER-Based Similarity — getIDEr","text":"Calculate similarity matrix based Inter-group Differential Expression (IDER) metrics selected batch effects regressed .","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getIDEr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute IDER-Based Similarity — getIDEr","text":"","code":"getIDEr(   seu,   group.by.var = \"initial_cluster\",   batch.by.var = \"Batch\",   verbose = TRUE,   use.parallel = FALSE,   n.cores = 1,   downsampling.size = 40,   downsampling.include = TRUE,   downsampling.replace = TRUE )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getIDEr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute IDER-Based Similarity — getIDEr","text":"seu Seurat S4 object includes initial_cluster column meta.data. Required. group..var Character string specifying column seu@meta.data defines initial clusters (batch-specific groups). Default \"initial_cluster\". batch..var Character string specifying metadata column indicates batch information. Default \"Batch\". verbose Logical. TRUE, progress messages progress bar displayed. Default TRUE. use.parallel Logical. TRUE, parallel computation used (requires doParallel); case, progress bar shown. Default FALSE. n.cores Numeric. number cores use parallel computing. Default 1. downsampling.size Numeric. number cells representing group. Default 40. downsampling.include Logical. Whether include groups fewer cells downsampling.size. Default FALSE. downsampling.replace Logical. Whether sample replacement group smaller downsampling.size. Default FALSE.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/getIDEr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute IDER-Based Similarity — getIDEr","text":"list objects: similarity matrix, numeric vector recording cells used, data frame group combinations included.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/hdbscan.seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial Clustering for Evaluating Integration — hdbscan.seurat","title":"Initial Clustering for Evaluating Integration — hdbscan.seurat","text":"function applies HDBSCAN, density-based clustering algorithm, corrected dimension reduction Seurat object.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/hdbscan.seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial Clustering for Evaluating Integration — hdbscan.seurat","text":"","code":"hdbscan.seurat(   seu,   batch.var = \"Batch\",   reduction = \"pca\",   dims = seq_len(15),   minPts = 25 )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/hdbscan.seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial Clustering for Evaluating Integration — hdbscan.seurat","text":"seu Seurat object containing integrated batch-corrected data (e.g. PCA results). batch.var Character string specifying metadata column contains batch information. Default \"Batch\". reduction Character string specifying name dimension reduction use (e.g. \"PCA\"). Default \"PCA\". dims Numeric vector indicating dimensions used initial clustering. Default 1:15. minPts Integer specifying minimum number points required form cluster. value passed hdbscan function. Default 25.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/hdbscan.seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial Clustering for Evaluating Integration — hdbscan.seurat","text":"Seurat object two additional columns meta.data: dbscan_cluster initial_cluster.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/initialClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial Clustering — initialClustering","title":"Initial Clustering — initialClustering","text":"Perform batch-specific initial clustering Seurat object.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/initialClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial Clustering — initialClustering","text":"","code":"initialClustering(   seu,   batch.var = \"Batch\",   cut.height = 0.4,   nfeatures = 2000,   additional.vars.to.regress = NULL,   dims = seq_len(14),   resolution = 0.6,   downsampling.size = 50,   verbose = FALSE )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/initialClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial Clustering — initialClustering","text":"seu Seurat object. Required. batch.var Character string specifying one column names seu@meta.data used partition object subsets. Default \"Batch\". cut.height Numeric value specifying height cut hierarchical trees. Default 0.4. nfeatures Numeric value indicating number high-variance genes use. Default 2000. additional.vars..regress Character vector additional variable names seu@meta.data regress . Optional. Default NULL. dims Numeric vector specifying dimensions used clustering (passed Seurat). Default 1:14. resolution Numeric value clustering resolution (passed Seurat). Default 0.6. downsampling.size Numeric value indicating number cells representing group. Default 40. verbose Logical. TRUE, progress bar displayed. Default FALSE.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/initialClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial Clustering — initialClustering","text":"Seurat S4 object initial cluster assignments stored initial_cluster column meta.data.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/measureSimilarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure similarity between two vectors — measureSimilarity","title":"Measure similarity between two vectors — measureSimilarity","text":"Measure similarity two vectors","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/measureSimilarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure similarity between two vectors — measureSimilarity","text":"","code":"measureSimilarity(x1, x2, method = \"pearson\")"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/measureSimilarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure similarity between two vectors — measureSimilarity","text":"x1 x1 x2 x2 method method","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/measureSimilarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure similarity between two vectors — measureSimilarity","text":"similarity matrix","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/mergeInitialClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Initial Clusters — mergeInitialClusters","title":"Merge Initial Clusters — mergeInitialClusters","text":"Merge initial clusters based provided similarity matrix hierarchical clustering.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/mergeInitialClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Initial Clusters — mergeInitialClusters","text":"","code":"mergeInitialClusters(   seu_list,   dist_list,   use = \"coef\",   method = \"hc\",   hc.method = \"average\",   cutree.by = \"h\",   cutree.h = 0.6,   cutree.k = 3,   batch.var = \"Batch\" )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/mergeInitialClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Initial Clusters — mergeInitialClusters","text":"seu_list list Seurat objects containing single-cell data. parameter required. dist_list list similarity matrices returned getDistMat(). order matrices correspond Seurat objects seu_list. use string specifying similarity measure use. Currently, \"coef\" supported. Default \"coef\". method string specifying clustering method employ. default \"hc\" hierarchical clustering. hc.method string passed method parameter hclust(). Default \"average\". cutree.character indicating whether cut dendrogram height (\"h\", default) set number clusters (\"k\"). cutree.h numeric value defining height cut tree cutree.= \"h\". Default 0.6. cutree.k numeric value specifying number clusters generate cutree.= \"k\". Default 3. batch.var character string representing metadata column name contains batch information. Default \"Batch\".","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/mergeInitialClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Initial Clusters — mergeInitialClusters","text":"list Seurat objects initial clustering updated. new cluster assignments stored inicluster field Seurat object, whilst original assignments preserved inicluster_tmp field.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/mergeInitialClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge Initial Clusters — mergeInitialClusters","text":"function accepts list Seurat objects corresponding list similarity matrices, merges initial clusters using hierarchical clustering approach. updated cluster assignments stored within Seurat object.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Pancreas Count Matrix — pancreas_counts","title":"Pancreas Count Matrix — pancreas_counts","text":"dataset comprises single-cell RNA-seq count matrix pancreatic data human mouse samples.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pancreas Count Matrix — pancreas_counts","text":"","code":"data(pancreas_counts)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pancreas Count Matrix — pancreas_counts","text":"sparse matrix class \"dgCMatrix\" 12474 rows (genes) 10127 columns (cells).","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_counts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pancreas Count Matrix — pancreas_counts","text":"count matrix sample information downloaded NCBI GEO accession GSE84133. Reference: Baron M, Veres , Wolock SL, Faust AL, Gaujoux R, Vetere , et al. single-cell transcriptomic map human mouse pancreas reveals inter- intra-cell population structure. Cell Syst. 2016;3:346–360.e4.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pancreas Count Matrix — pancreas_counts","text":"sparse count matrix cross-species pancreatic data.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Pancreas Metadata — pancreas_meta","title":"Pancreas Metadata — pancreas_meta","text":"dataset provides cell-level metadata human mouse pancreatic data used study.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pancreas Metadata — pancreas_meta","text":"","code":"data(pancreas_meta)"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pancreas Metadata — pancreas_meta","text":"data frame 10127 rows 3 columns: Batch Species information (human mouse). Group Cell type annotation. Sample Donor information.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_meta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pancreas Metadata — pancreas_meta","text":"metadata downloaded alongside count matrix NCBI GEO accession GSE84133. Reference: Baron M, Veres , Wolock SL, Faust AL, Gaujoux R, Vetere , et al. single-cell transcriptomic map human mouse pancreas reveals inter- intra-cell population structure. Cell Syst. 2016;3:346–360.e4.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/pancreas_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pancreas Metadata — pancreas_meta","text":"Cell-level metadata cross-species pancreatic data.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotDistMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Similarity Matrix with pheatmap — plotDistMat","title":"Plot Similarity Matrix with pheatmap — plotDistMat","text":"function creates heatmap similarity matrix computed getDistMat().","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotDistMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Similarity Matrix with pheatmap — plotDistMat","text":"","code":"plotDistMat(dist.list, use = \"coef\")"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotDistMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Similarity Matrix with pheatmap — plotDistMat","text":"dist.list list representing similarity matrix output getDistMat(). Required. use Character string specifying similarity measure use. Default \"coef\". option currently available.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotDistMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Similarity Matrix with pheatmap — plotDistMat","text":"pheatmap object displaying similarity matrix.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Heatmap for the IDER-Based Similarity Matrix — plotHeatmap","title":"Plot Heatmap for the IDER-Based Similarity Matrix — plotHeatmap","text":"function generates heatmap visualises similarity shared groups across batches, computed getIDEr.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Heatmap for the IDER-Based Similarity Matrix — plotHeatmap","text":"","code":"plotHeatmap(seu, ider, batch.var = \"Batch\")"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Heatmap for the IDER-Based Similarity Matrix — plotHeatmap","text":"seu Seurat object. ider output list getIDEr function. batch.var Character string specifying metadata column contains batch information. Default \"Batch\".","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Heatmap for the IDER-Based Similarity Matrix — plotHeatmap","text":"heatmap displaying similarity shared groups across batches.","code":""},{"path":[]},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/plotHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Heatmap for the IDER-Based Similarity Matrix — plotHeatmap","text":"","code":"if (FALSE) { # \\dontrun{   plotHeatmap(seu, ider) } # }"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/scatterPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot by a selected feature — scatterPlot","title":"Scatterplot by a selected feature — scatterPlot","text":"Scatterplot Seurat object based dimension reduction.","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/scatterPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot by a selected feature — scatterPlot","text":"","code":"scatterPlot(   seu,   reduction,   colour.by,   colvec = NULL,   title = NULL,   sort.by.numbers = TRUE,   viridis_option = \"B\" )"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/scatterPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot by a selected feature — scatterPlot","text":"seu Seurat S4 object step getIDER. Required. reduction Character. dimension reduction used plot. Common options: \"pca\", \"tsne\", \"umap\". availability dimension reduction can checked Reductions(seu). colour.Character. One column names seu@meta.data. Can either discreet continuous variables. colvec vector Hex colour codes. value given (default), vector 74 colours used. title Character. Title figure. sort..numbers Boolean. Whether sort groups number cells.(Default: True) viridis_option viridis_option. (Default: B)","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/scatterPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatterplot by a selected feature — scatterPlot","text":"ggplot2 scatter plot","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/reference/scatterPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatterplot by a selected feature — scatterPlot","text":"","code":"if (FALSE) { # \\dontrun{ library(Seurat) seu <- NormalizeData(seu, verbose = FALSE) # input Seurat object seu <- FindVariableFeatures(seu, selection.method = \"vst\", nfeatures = 2000,  verbose = FALSE) seu <- ScaleData(seu, verbose = FALSE) seu <- RunPCA(seu, npcs = 20, verbose = FALSE) scatterPlot(seu, \"pca\",colour.by = \"Batch\", title = \"PCA\") } # }"},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/news/index.html","id":"cider-0992","dir":"Changelog","previous_headings":"","what":"CIDER 0.99.2","title":"CIDER 0.99.2","text":"Enhanced compatibility Seurat v5 Updated pkgdown site use Bootstrap 5","code":""},{"path":"https://zhiyuan-hu-lab.github.io/CIDER/news/index.html","id":"cider-0990","dir":"Changelog","previous_headings":"","what":"CIDER 0.99.0","title":"CIDER 0.99.0","text":"CRAN release: 2021-11-19 Introduced NEWS.md file track package changes","code":""}]
